#+TITLE: Sylvia Mode
#+AUTHOR: Brandon Guttersohn

A major mode for working with text phonetically.

* Major Mode

** Setup

#+BEGIN_SRC emacs-lisp
(defvar sylvia:idle-timer nil)
(defvar sylvia:idle-delay 0.5)

(defun sylvia-mode (&optional enabled)
  "Major mode for editing text with a focus on phonetic values."
  (interactive)
  (let
      ((enabled (or enabled (if (eq major-mode 'sylvia-mode) 0 1))))
    (when (> enabled 0)
      (sylvia:setup))))

(defun sylvia:setup ()
  "Configure sylvia-mode"
  (interactive)
  (setq major-mode 'sylvia-mode)
  (make-local-variable 'sylvia:idle-timer)
  (when sylvia:idle-timer
      (cancel-timer sylvia:idle-timer))
  (add-hook 'post-command-hook 'sylvia:post-command-actions nil t)
  (setq sylvia:idle-timer (run-with-idle-timer sylvia:idle-delay t 'sylvia:idle-actions)))

(defun sylvia:cleanup ()
  "Clean up sylvia-mode"
  (interactive)
  (when sylvia:idle-timer
    (cancel-timer sylvia:idle-timer))
  (remove-hook 'post-command-hook 'sylvia:post-command-actions t))

(defun sylvia:mode-p ()
  "Sylvia the current major mode?"
  (eq major-mode 'sylvia-mode))

(defun sylvia:idle-actions ()
  "Test")

(defun sylvia:post-command-actions ()
    "Run after every command."
    (when (sylvia:mode-p)
      (sylvia:compose-current-buffer)
      (sylvia:echo-phonemes-at-point)
      (sylvia:update-syllable-margins)))

(defun sylvia:compose-current-buffer ()
    (interactive)
    "Update contents of buffer into Sylvia."
    (sylvia:compose-buffer (buffer-name)))
#+END_SRC

#+RESULTS:
: sylvia:compose-current-buffer

** Echo Phonemes at Point

#+BEGIN_SRC emacs-lisp
  (defun sylvia:echo-phonemes-at-point ()
    "Show the phonemes."
    (when (null (current-message))
      (let*
          ((message-log-max nil)
           (word          (thing-at-point 'word 'no-properties))
           (phoneme-reprs (and word (sylvia:as-phonemes word))))
        (when phoneme-reprs
          (message (concat word ": " (string-join phoneme-reprs "   ")))))))
#+END_SRC

#+RESULTS:
: sylvia:echo-phonemes-at-point

** Syllable Counts

#+BEGIN_SRC emacs-lisp
  (defvar sylvia:syllable-count-overlays nil)

  (defun sylvia:update-syllable-margins ()
    (interactive)
    "Update left margin to show syllable counts."
    ;; ensure this is buffer-local (don't think I'm doing this right?)
    (make-local-variable 'sylvia:syllable-count-overlays)
    ;; clear previous overlays
    (dolist (ov sylvia:syllable-count-overlays)
      (delete-overlay ov))
    ;; add new overlays
    (save-excursion
      (let
          ((win (get-buffer-window (current-buffer)))
           (sylcounts (sylvia:syllable-counts (buffer-name))))
        (goto-char (window-start win))
        (while (not (eobp))
          (let*
              ((ov     (make-overlay (point) (point)))
               (cnt    (first sylcounts))
               (cntstr (if (> (string-to-number cnt) 0) cnt "")))
            (push ov sylvia:syllable-count-overlays)
            (overlay-put ov 'before-string (propertize " " 'display `((margin left-margin) ,cntstr)))
            (setq sylcounts (cdr sylcounts)))
        (forward-line))
      (set-window-margins win 4))))
#+END_SRC

#+RESULTS:
: sylvia:update-syllable-margins


* Glue Code

** Lookup or Infer

#+BEGIN_SRC emacs-lisp
(defun sylvia:lookup-or-infer (word)
  "Lookup phonemes, infer if failed to do so."
  (let*
      ((lookup   (sylvia:lookup word))
       (phonemes (if (> (length lookup) 0) lookup (sylvia:infer word))))
    phonemes))
#+END_SRC

#+RESULTS:
: sylvia:lookup-or-infer

** As Phonemes

#+BEGIN_SRC emacs-lisp
(defun sylvia:as-phonemes (string)
  "Convert this line of text to phonemes."
  (let
      ((phonemes (sylvia:lookup-or-infer (first (split-string string)))))
    (and phonemes (mapcar (lambda (x) (string-join x " ") ) phonemes))))
#+END_SRC

#+RESULTS:
: sylvia:as-phonemes





