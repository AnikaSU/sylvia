#+TITLE: Sylvia Mode
#+AUTHOR: Brandon Guttersohn

A major mode for working with text phonetically.

* Major Mode

** Setup

#+BEGIN_SRC emacs-lisp
(defvar sylvia:idle-timer nil)
(defvar sylvia:idle-delay 0.5)

(defun sylvia-mode (&optional enabled)
  "Major mode for editing text with a focus on phonetic values."
  (interactive)
  (let
      ((enabled (or enabled (if (eq major-mode 'sylvia-mode) 0 1))))
    (when (> enabled 0)
      (sylvia:setup))))

(defun sylvia:setup ()
  "Configure sylvia-mode"
  (interactive)
  (setq major-mode 'sylvia-mode)
  (make-local-variable 'sylvia:idle-timer)
  (when sylvia:idle-timer
      (cancel-timer sylvia:idle-timer))
  (add-hook 'post-command-hook 'sylvia:post-command-actions nil t)
  (setq sylvia:idle-timer (run-with-idle-timer sylvia:idle-delay t 'sylvia:idle-actions)))

(defun sylvia:cleanup ()
  "Clean up sylvia-mode"
  (interactive)
  (when sylvia:idle-timer
    (cancel-timer sylvia:idle-timer))
  (remove-hook 'post-command-hook 'sylvia:post-command-actions t))

(defun sylvia:mode-p ()
  "Sylvia the current major mode?"
  (eq major-mode 'sylvia-mode))

(defun sylvia:idle-actions ()
  "Test")

(defun sylvia:post-command-actions ()
    "Run after every command."
    (when (sylvia:mode-p)
      (sylvia:compose-current-buffer)
      (sylvia:echo-phonemes-at-point)
      (sylvia:update-syllable-margins)
      ))

(defun sylvia:compose-current-buffer ()
    (interactive)
    "Update contents of buffer into Sylvia."
    (sylvia:update-poem (buffer-name)  (lambda (x))))
#+END_SRC

#+RESULTS:
: sylvia:compose-current-buffer

** Echo Phonemes at Point

#+BEGIN_SRC emacs-lisp
  (defun sylvia:echo-phonemes-at-point ()
    "Display phonetic representation of word at point in the echo area."
    (when (null (current-message))
      (let*
          ((message-log-max nil)
           (word          (thing-at-point 'word 'no-properties)))
        (when word
          (sylvia:lookup word (sylvia:--echo-phonemes-at-point--deferred-generator word))))))

  (defun sylvia:--echo-phonemes-at-point--deferred-generator (word)
    "Deferred callback generator for `sylvia:echo-phonemes-at-point'"
    (lexical-let
        ((captured-word word))
      #'(lambda (phoneme-reprs)
          (when phoneme-reprs
            (message "%s: %s" captured-word phoneme-reprs)))))
#+END_SRC

#+RESULTS:
: sylvia:--echo-phonemes-at-point--deferred-generator

** Syllable Counts

#+BEGIN_SRC emacs-lisp
  (defvar sylvia:syllable-count-overlays nil)

  (defun sylvia:update-syllable-margins ()
    "Update left margin to show syllable counts."
    (sylvia:poem-syllable-counts #'sylvia:--update-syllable-margins--deferred))

  (defun sylvia:--update-syllable-margins--deferred (sylcounts)
    (interactive)
    "Update left margin to show syllable counts."
    ;; ensure this is buffer-local (don't think I'm doing this right?)
    (make-local-variable 'sylvia:syllable-count-overlays)
    ;; clear previous overlays
    (dolist (ov sylvia:syllable-count-overlays)
      (delete-overlay ov))
    ;; add new overlays
    (save-excursion
      (let*
          ((win (get-buffer-window (current-buffer)))
           (sylcounts (-slice sylcounts (- (line-number-at-pos (window-start win)) 1))))
        (goto-char (window-start win))
        (while (not (eobp))
          (let*
              ((ov     (make-overlay (point) (point)))
               (cnt    (format "% 4s" (number-to-string (first sylcounts))))
               (cntstr (if (> (string-to-number cnt) 0) cnt "    ")))
            (put-text-property 0 4 'face '('bold (foreground-color . "#FFFF00")) cntstr)
            (push ov sylvia:syllable-count-overlays)
            (overlay-put ov 'before-string (propertize " " 'display `((margin left-margin) ,cntstr)))
            (setq sylcounts (cdr sylcounts)))
        (forward-line))
      (set-window-margins win 4))))
#+END_SRC

#+RESULTS:
: sylvia:--update-syllable-margins--deferred

** Rhyme at Point

#+BEGIN_SRC emacs-lisp
(defun my-presorted-completion-table (completions)
  "Bypass completing-read's desire to sort items we send. Modified with lexical let from here:
https://emacs.stackexchange.com/questions/8115/make-completing-read-respect-sorting-order-of-a-collection
NOTE: Works for built-in and helm, but ivy still sorts."
  (lexical-let ((captured-completions completions))
    (lambda (string pred action)
      (if (eq action 'metadata)
          `(metadata (display-sort-function . ,#'identity))
        (complete-with-action action captured-completions string pred)))))

(defun sylvia:copy-rhyme-at-point-as-kill (prefix-arg)
  "Interactively list rhymes for thing at point, placing selected word into kill-ring."
  (interactive "P")
  (let*
      ((ivy-sort-functions-alist nil) ;; workaround ivy always sorting entries
       (word                     (thing-at-point 'word 'no-properties))
       (rhyme-level              (if (equal prefix-arg '(4)) 'loose 'perfect))
       (rhyme                    (and word (completing-read
                                   (format "[%s] Rhymes for %s: " (symbol-name rhyme-level) word)
                                   (my-presorted-completion-table (sylvia:rhyme word rhyme-level))))))
    (if rhyme
        (progn
          (kill-new (downcase rhyme))
          (message "Pushed %S onto the kill-ring." rhyme))
      (message "Nothing at point!"))))
#+END_SRC

#+RESULTS:
: sylvia:copy-rhyme-at-point-as-kill

* Glue Code

#+BEGIN_SRC emacs-lisp
(defun sylvia:lookup-or-infer (word)
  "Lookup phonemes, infer if failed to do so."
  (let*
      ((lookup   (sylvia:lookup word))
       (phonemes (if (> (length lookup) 0) lookup (sylvia:infer word))))
    phonemes))

(defun sylvia:as-phonemes (string)
  "Convert this line of text to phonemes."
  (let
      ((phonemes (sylvia:lookup-or-infer (first (split-string string)))))
    (and phonemes (mapcar (lambda (x) (string-join x " ") ) phonemes))))
#+END_SRC

#+RESULTS:
: sylvia:as-phonemes





